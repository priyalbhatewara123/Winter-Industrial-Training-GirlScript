DYNAMIC PROGRAMMING
1. Memoization (Top Down DP)  Recursion + Memorising 
2. Tabulation (Bottom Up Dp)


Recursion - TC(2^n)
int fibonacci(int n){
	
	//base case
	if(n == 0 || n == 1)
		return n;

	return fibonacci(n-1) + fibonacci(n-2);
}


Top Down 
TC - O(n^2)
SC - O(n)
vector<int> dp(n+1 , -1);
int fibonacci(int n){
	//base case
	if(n == 0 || n == 1)
		return n;

	if(dp[n] != -1)
		return dp[n];

	return dp[n] = fibonacci(n-1) + fibonacci(n-2);
}

Bottom Up
TC: O(n)
SC: O(n)
int fibonacci(int n){
	vector<int> dp(n+1 , -1);
	dp[0] = 0;
	dp[1] = 1;

	for(int i=2;i<=n;i++){
		dp[i] = dp[i-1] + dp[i-2];
	}

	return dp[n];
}

Efficient Solution
TC: O(N)
SC: O(1)
int fibonacci(int n){
	if(n==0 || n==1)
	 	return n;

	int a = 0;
	int b = 1;
	int c;
	for(int i=2;i<=n;i++){
		c = a+b;
		a = b;
		b = c;
	}

	return c;
}